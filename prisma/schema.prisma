// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model for authentication
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  role      UserRole @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

enum UserRole {
  ADMIN
  SUPERVISOR
  USER
}

// Worker model
model Worker {
  id         String       @id @default(cuid())
  name       String
  employeeId String       @unique
  email      String?
  phone      String?
  status     WorkerStatus @default(PENDING)
  role       String
  department String?
  startDate  DateTime?
  endDate    DateTime?
  lastSeen   DateTime?
  
  // Relations
  documents         Document[]
  scanHistory       ScanHistory[]
  equipmentUsage    EquipmentUsage[]
  trainingEnrollments TrainingEnrollment[]
  skills            WorkerSkill[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("workers")
}

enum WorkerStatus {
  ACTIVE
  INACTIVE
  PENDING
  SUSPENDED
}

// Document model
model Document {
  id          String         @id @default(cuid())
  name        String
  type        DocumentType
  status      DocumentStatus @default(VALID)
  description String?
  fileUrl     String?
  fileName    String?
  fileSize    Int?
  uploadedAt  DateTime       @default(now())
  expiryDate  DateTime?
  
  // Relations
  workerId String?
  worker   Worker? @relation(fields: [workerId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("documents")
}

enum DocumentType {
  ID
  CERTIFICATION
  TRAINING
  MEDICAL
  OTHER
}

enum DocumentStatus {
  VALID
  EXPIRING
  EXPIRED
}

// Scan History model for QR scanner
model ScanHistory {
  id        String    @id @default(cuid())
  workerId  String
  worker    Worker    @relation(fields: [workerId], references: [id])
  status    ScanStatus
  location  String?
  scannedAt DateTime  @default(now())
  qrData    Json?

  @@map("scan_history")
}

enum ScanStatus {
  SUCCESS
  ERROR
  NOT_FOUND
}

// Contractor model
model Contractor {
  id          String            @id @default(cuid())
  companyName String
  abn         String?           @unique
  contactName String
  email       String
  phone       String
  address     String?
  status      ContractorStatus  @default(ACTIVE)
  
  // Rates and financial
  hourlyRate      Float?
  dailyRate       Float?
  emergencyRate   Float?
  
  // Skills and certifications
  skillTags       String[]
  certifications  ContractorCertification[]
  
  // Availability
  isAvailable     Boolean          @default(true)
  availableFrom   DateTime?
  availableTo     DateTime?
  maxHoursPerWeek Int?
  
  // Relations
  assignments         ContractorAssignment[]
  equipmentUsage      EquipmentUsage[]
  trainingEnrollments TrainingEnrollment[]
  skills              ContractorSkill[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("contractors")
}

enum ContractorStatus {
  ACTIVE
  INACTIVE
  PENDING
  SUSPENDED
  BLACKLISTED
}

// Contractor certifications
model ContractorCertification {
  id           String   @id @default(cuid())
  contractorId String
  contractor   Contractor @relation(fields: [contractorId], references: [id])
  
  name         String
  issuer       String
  number       String?
  issuedDate   DateTime
  expiryDate   DateTime?
  status       DocumentStatus @default(VALID)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("contractor_certifications")
}

// Contractor assignments
model ContractorAssignment {
  id           String   @id @default(cuid())
  contractorId String
  contractor   Contractor @relation(fields: [contractorId], references: [id])
  
  projectName  String
  description  String?
  startDate    DateTime
  endDate      DateTime?
  status       AssignmentStatus @default(ACTIVE)
  
  // Rate overrides for this assignment
  agreedRate   Float?
  rateType     RateType @default(HOURLY)
  
  // Hours tracking
  hoursWorked  Float    @default(0)
  totalCost    Float    @default(0)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("contractor_assignments")
}

enum AssignmentStatus {
  ACTIVE
  COMPLETED
  CANCELLED
  PAUSED
}

enum RateType {
  HOURLY
  DAILY
  FIXED
}

// Equipment model
model Equipment {
  id             String          @id @default(cuid())
  name           String
  type           EquipmentType
  model          String?
  serialNumber   String?         @unique
  registrationId String?         @unique
  status         EquipmentStatus @default(AVAILABLE)
  
  // Technical details
  specifications Json?
  capacity       String?
  fuelType       String?
  
  // Ownership and costs
  isOwned        Boolean         @default(true)
  purchaseDate   DateTime?
  purchasePrice  Float?
  currentValue   Float?
  dailyRate      Float?
  
  // Location and availability
  currentLocation String?
  isAvailable     Boolean         @default(true)
  
  // Maintenance
  lastServiceDate    DateTime?
  nextServiceDate    DateTime?
  serviceIntervalKm  Int?
  serviceIntervalHours Int?
  currentKm          Int?
  currentHours       Float?
  
  // Relations
  usage              EquipmentUsage[]
  maintenanceRecords EquipmentMaintenance[]
  assignments        EquipmentAssignment[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("equipment")
}

enum EquipmentType {
  EXCAVATOR
  BULLDOZER
  DUMP_TRUCK
  LOADER
  CRANE
  GENERATOR
  COMPRESSOR
  DRILL_RIG
  GRADER
  WATER_TRUCK
  FUEL_TRUCK
  LIGHT_VEHICLE
  HEAVY_VEHICLE
  OTHER
}

enum EquipmentStatus {
  AVAILABLE
  IN_USE
  MAINTENANCE
  OUT_OF_SERVICE
  DISPOSED
}

// Equipment usage tracking
model EquipmentUsage {
  id          String   @id @default(cuid())
  equipmentId String
  equipment   Equipment @relation(fields: [equipmentId], references: [id])
  
  // Operator details
  operatorType OperatorType
  workerId     String?
  worker       Worker?   @relation(fields: [workerId], references: [id])
  contractorId String?
  contractor   Contractor? @relation(fields: [contractorId], references: [id])
  
  // Usage details
  startTime    DateTime
  endTime      DateTime?
  location     String?
  purpose      String?
  
  // Tracking
  startKm      Int?
  endKm        Int?
  startHours   Float?
  endHours     Float?
  fuelUsed     Float?
  
  notes        String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("equipment_usage")
}

enum OperatorType {
  EMPLOYEE
  CONTRACTOR
}

// Equipment maintenance
model EquipmentMaintenance {
  id          String           @id @default(cuid())
  equipmentId String
  equipment   Equipment        @relation(fields: [equipmentId], references: [id])
  
  type        MaintenanceType
  description String
  scheduledDate DateTime?
  completedDate DateTime?
  status      MaintenanceStatus @default(SCHEDULED)
  
  // Cost tracking
  cost        Float?
  supplier    String?
  
  // Details
  kmReading   Int?
  hoursReading Float?
  partsUsed   Json?
  notes       String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("equipment_maintenance")
}

enum MaintenanceType {
  ROUTINE_SERVICE
  REPAIR
  INSPECTION
  CALIBRATION
  EMERGENCY
}

enum MaintenanceStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  OVERDUE
}

// Equipment assignments to projects
model EquipmentAssignment {
  id          String   @id @default(cuid())
  equipmentId String
  equipment   Equipment @relation(fields: [equipmentId], references: [id])
  
  projectName String
  description String?
  startDate   DateTime
  endDate     DateTime?
  status      AssignmentStatus @default(ACTIVE)
  
  // Cost tracking
  agreedRate  Float?
  totalCost   Float    @default(0)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("equipment_assignments")
}

// Training Programs
model TrainingProgram {
  id          String            @id @default(cuid())
  name        String
  description String?
  category    TrainingCategory
  provider    String?
  duration    Int               // Duration in hours
  
  // Validity and renewal
  validityPeriod   Int?          // Validity in months
  isRecurring      Boolean       @default(false)
  renewalRequired  Boolean       @default(false)
  
  // Requirements
  prerequisites    String[]      // List of required skills or training
  minExperience    Int?          // Minimum months of experience required
  
  // Content and delivery
  deliveryMethod   DeliveryMethod @default(IN_PERSON)
  materials        Json?         // Training materials, links, etc.
  assessmentType   AssessmentType @default(PRACTICAL)
  passingScore     Int?          // Minimum score to pass (percentage)
  
  // Cost and scheduling
  cost            Float?
  maxParticipants Int?
  
  // Relations
  sessions        TrainingSession[]
  enrollments     TrainingEnrollment[]
  skills          TrainingSkill[]
  requirements    TrainingRequirement[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("training_programs")
}

enum TrainingCategory {
  SAFETY
  TECHNICAL
  COMPLIANCE
  LEADERSHIP
  EQUIPMENT_OPERATION
  EMERGENCY_RESPONSE
  ENVIRONMENTAL
  QUALITY_ASSURANCE
  SOFT_SKILLS
  OTHER
}

enum DeliveryMethod {
  IN_PERSON
  ONLINE
  HYBRID
  ON_THE_JOB
  SIMULATION
}

enum AssessmentType {
  WRITTEN
  PRACTICAL
  OBSERVATION
  COMBINATION
  NONE
}

// Training Sessions (scheduled instances of programs)
model TrainingSession {
  id              String            @id @default(cuid())
  trainingProgramId String
  trainingProgram   TrainingProgram @relation(fields: [trainingProgramId], references: [id])
  
  // Session details
  startDate       DateTime
  endDate         DateTime
  location        String?
  instructor      String?
  maxParticipants Int?
  status          SessionStatus     @default(SCHEDULED)
  
  // Session specific info
  notes           String?
  materials       Json?
  cost            Float?
  
  // Relations
  attendances     TrainingAttendance[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("training_sessions")
}

enum SessionStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  POSTPONED
}

// Training Enrollments (who is enrolled in what program)
model TrainingEnrollment {
  id                String          @id @default(cuid())
  trainingProgramId String
  trainingProgram   TrainingProgram @relation(fields: [trainingProgramId], references: [id])
  
  // Participant details
  participantType   ParticipantType
  workerId          String?
  worker            Worker?         @relation(fields: [workerId], references: [id])
  contractorId      String?
  contractor        Contractor?     @relation(fields: [contractorId], references: [id])
  
  // Enrollment details
  enrolledAt        DateTime        @default(now())
  status            EnrollmentStatus @default(ENROLLED)
  priority          Priority        @default(MEDIUM)
  deadline          DateTime?
  
  // Progress tracking
  progressPercent   Int             @default(0)
  startedAt         DateTime?
  completedAt       DateTime?
  
  // Results
  finalScore        Int?
  passed            Boolean?
  certificateIssued Boolean         @default(false)
  notes             String?
  
  // Relations
  attendances       TrainingAttendance[]
  requirements      TrainingRequirement[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("training_enrollments")
}

enum ParticipantType {
  EMPLOYEE
  CONTRACTOR
}

enum EnrollmentStatus {
  ENROLLED
  IN_PROGRESS
  COMPLETED
  FAILED
  CANCELLED
  ON_HOLD
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

// Training Attendance (per session)
model TrainingAttendance {
  id                    String            @id @default(cuid())
  trainingSessionId     String
  trainingSession       TrainingSession   @relation(fields: [trainingSessionId], references: [id])
  trainingEnrollmentId  String
  trainingEnrollment    TrainingEnrollment @relation(fields: [trainingEnrollmentId], references: [id])
  
  // Attendance details
  attended              Boolean           @default(false)
  arrivalTime           DateTime?
  departureTime         DateTime?
  hoursAttended         Float?
  
  // Assessment results
  score                 Int?
  passed                Boolean?
  feedback              String?
  
  // Instructor notes
  performance           Performance?
  notes                 String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("training_attendances")
}

enum Performance {
  EXCELLENT
  GOOD
  SATISFACTORY
  NEEDS_IMPROVEMENT
  POOR
}

// Skills Management
model Skill {
  id          String      @id @default(cuid())
  name        String      @unique
  description String?
  category    SkillCategory
  level       SkillLevel  @default(BASIC)
  
  // Validation and certification
  requiresCertification Boolean @default(false)
  certificationAuthority String?
  validityPeriod        Int?    // Months
  
  // Relations
  workerSkills      WorkerSkill[]
  contractorSkills  ContractorSkill[]
  trainingSkills    TrainingSkill[]
  jobRequirements   JobSkillRequirement[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("skills")
}

enum SkillCategory {
  TECHNICAL
  SAFETY
  EQUIPMENT_OPERATION
  LEADERSHIP
  COMMUNICATION
  PROBLEM_SOLVING
  PHYSICAL
  REGULATORY
  OTHER
}

enum SkillLevel {
  BASIC
  INTERMEDIATE
  ADVANCED
  EXPERT
}

// Worker Skills (many-to-many with proficiency tracking)
model WorkerSkill {
  id              String    @id @default(cuid())
  workerId        String
  worker          Worker    @relation(fields: [workerId], references: [id])
  skillId         String
  skill           Skill     @relation(fields: [skillId], references: [id])
  
  // Proficiency details
  level           SkillLevel
  experienceYears Float?
  lastUsed        DateTime?
  verified        Boolean   @default(false)
  verifiedBy      String?
  verifiedAt      DateTime?
  
  // Certification info
  certified       Boolean   @default(false)
  certificationDate DateTime?
  expiryDate      DateTime?
  certificationNumber String?
  
  notes           String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([workerId, skillId])
  @@map("worker_skills")
}

// Contractor Skills (similar to WorkerSkill)
model ContractorSkill {
  id              String     @id @default(cuid())
  contractorId    String
  contractor      Contractor @relation(fields: [contractorId], references: [id])
  skillId         String
  skill           Skill      @relation(fields: [skillId], references: [id])
  
  // Proficiency details
  level           SkillLevel
  experienceYears Float?
  lastUsed        DateTime?
  verified        Boolean    @default(false)
  verifiedBy      String?
  verifiedAt      DateTime?
  
  // Certification info
  certified       Boolean    @default(false)
  certificationDate DateTime?
  expiryDate      DateTime?
  certificationNumber String?
  
  notes           String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([contractorId, skillId])
  @@map("contractor_skills")
}

// Training Program Skills (what skills does a training program provide)
model TrainingSkill {
  id                String          @id @default(cuid())
  trainingProgramId String
  trainingProgram   TrainingProgram @relation(fields: [trainingProgramId], references: [id])
  skillId           String
  skill             Skill           @relation(fields: [skillId], references: [id])
  
  // What level this training provides
  levelProvided     SkillLevel
  isRequired        Boolean         @default(true) // Is this skill required or optional
  
  @@unique([trainingProgramId, skillId])
  @@map("training_skills")
}

// Job/Position Skill Requirements
model JobSkillRequirement {
  id            String     @id @default(cuid())
  jobTitle      String
  department    String?
  skillId       String
  skill         Skill      @relation(fields: [skillId], references: [id])
  
  // Requirement details
  requiredLevel SkillLevel
  isOptional    Boolean    @default(false)
  priority      Priority   @default(MEDIUM)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("job_skill_requirements")
}

// Training Requirements (compliance tracking)
model TrainingRequirement {
  id                    String              @id @default(cuid())
  name                  String
  description           String?
  type                  RequirementType
  
  // Applicability
  appliesToAllWorkers   Boolean             @default(false)
  appliesToDepartments  String[]            // List of departments
  appliesToRoles        String[]            // List of job roles
  
  // Training program linkage
  trainingProgramId     String?
  trainingProgram       TrainingProgram?    @relation(fields: [trainingProgramId], references: [id])
  
  // Timing and recurrence
  deadline              DateTime?
  isRecurring           Boolean             @default(false)
  recurrenceMonths      Int?                // How often to repeat
  gracePeridDays        Int?                // Grace period after expiry
  
  // Status tracking
  isActive              Boolean             @default(true)
  
  // Relations
  enrollments           TrainingEnrollment[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("training_requirements")
}

enum RequirementType {
  MANDATORY
  RECOMMENDED
  ROLE_SPECIFIC
  REGULATORY
  SAFETY_CRITICAL
}
