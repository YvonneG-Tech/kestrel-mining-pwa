// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model for authentication
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  role      UserRole @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

enum UserRole {
  ADMIN
  SUPERVISOR
  USER
}

// Worker model
model Worker {
  id         String       @id @default(cuid())
  name       String
  employeeId String       @unique
  email      String?
  phone      String?
  status     WorkerStatus @default(PENDING)
  role       String
  department String?
  startDate  DateTime?
  endDate    DateTime?
  lastSeen   DateTime?
  
  // Relations
  documents     Document[]
  scanHistory   ScanHistory[]
  equipmentUsage EquipmentUsage[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("workers")
}

enum WorkerStatus {
  ACTIVE
  INACTIVE
  PENDING
  SUSPENDED
}

// Document model
model Document {
  id          String         @id @default(cuid())
  name        String
  type        DocumentType
  status      DocumentStatus @default(VALID)
  description String?
  fileUrl     String?
  fileName    String?
  fileSize    Int?
  uploadedAt  DateTime       @default(now())
  expiryDate  DateTime?
  
  // Relations
  workerId String?
  worker   Worker? @relation(fields: [workerId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("documents")
}

enum DocumentType {
  ID
  CERTIFICATION
  TRAINING
  MEDICAL
  OTHER
}

enum DocumentStatus {
  VALID
  EXPIRING
  EXPIRED
}

// Scan History model for QR scanner
model ScanHistory {
  id        String    @id @default(cuid())
  workerId  String
  worker    Worker    @relation(fields: [workerId], references: [id])
  status    ScanStatus
  location  String?
  scannedAt DateTime  @default(now())
  qrData    Json?

  @@map("scan_history")
}

enum ScanStatus {
  SUCCESS
  ERROR
  NOT_FOUND
}

// Contractor model
model Contractor {
  id          String            @id @default(cuid())
  companyName String
  abn         String?           @unique
  contactName String
  email       String
  phone       String
  address     String?
  status      ContractorStatus  @default(ACTIVE)
  
  // Rates and financial
  hourlyRate      Float?
  dailyRate       Float?
  emergencyRate   Float?
  
  // Skills and certifications
  skills          String[]
  certifications  ContractorCertification[]
  
  // Availability
  isAvailable     Boolean          @default(true)
  availableFrom   DateTime?
  availableTo     DateTime?
  maxHoursPerWeek Int?
  
  // Relations
  assignments     ContractorAssignment[]
  equipmentUsage  EquipmentUsage[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("contractors")
}

enum ContractorStatus {
  ACTIVE
  INACTIVE
  PENDING
  SUSPENDED
  BLACKLISTED
}

// Contractor certifications
model ContractorCertification {
  id           String   @id @default(cuid())
  contractorId String
  contractor   Contractor @relation(fields: [contractorId], references: [id])
  
  name         String
  issuer       String
  number       String?
  issuedDate   DateTime
  expiryDate   DateTime?
  status       DocumentStatus @default(VALID)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("contractor_certifications")
}

// Contractor assignments
model ContractorAssignment {
  id           String   @id @default(cuid())
  contractorId String
  contractor   Contractor @relation(fields: [contractorId], references: [id])
  
  projectName  String
  description  String?
  startDate    DateTime
  endDate      DateTime?
  status       AssignmentStatus @default(ACTIVE)
  
  // Rate overrides for this assignment
  agreedRate   Float?
  rateType     RateType @default(HOURLY)
  
  // Hours tracking
  hoursWorked  Float    @default(0)
  totalCost    Float    @default(0)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("contractor_assignments")
}

enum AssignmentStatus {
  ACTIVE
  COMPLETED
  CANCELLED
  PAUSED
}

enum RateType {
  HOURLY
  DAILY
  FIXED
}

// Equipment model
model Equipment {
  id             String          @id @default(cuid())
  name           String
  type           EquipmentType
  model          String?
  serialNumber   String?         @unique
  registrationId String?         @unique
  status         EquipmentStatus @default(AVAILABLE)
  
  // Technical details
  specifications Json?
  capacity       String?
  fuelType       String?
  
  // Ownership and costs
  isOwned        Boolean         @default(true)
  purchaseDate   DateTime?
  purchasePrice  Float?
  currentValue   Float?
  dailyRate      Float?
  
  // Location and availability
  currentLocation String?
  isAvailable     Boolean         @default(true)
  
  // Maintenance
  lastServiceDate    DateTime?
  nextServiceDate    DateTime?
  serviceIntervalKm  Int?
  serviceIntervalHours Int?
  currentKm          Int?
  currentHours       Float?
  
  // Relations
  usage              EquipmentUsage[]
  maintenanceRecords EquipmentMaintenance[]
  assignments        EquipmentAssignment[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("equipment")
}

enum EquipmentType {
  EXCAVATOR
  BULLDOZER
  DUMP_TRUCK
  LOADER
  CRANE
  GENERATOR
  COMPRESSOR
  DRILL_RIG
  GRADER
  WATER_TRUCK
  FUEL_TRUCK
  LIGHT_VEHICLE
  HEAVY_VEHICLE
  OTHER
}

enum EquipmentStatus {
  AVAILABLE
  IN_USE
  MAINTENANCE
  OUT_OF_SERVICE
  DISPOSED
}

// Equipment usage tracking
model EquipmentUsage {
  id          String   @id @default(cuid())
  equipmentId String
  equipment   Equipment @relation(fields: [equipmentId], references: [id])
  
  // Operator details
  operatorType OperatorType
  workerId     String?
  worker       Worker?   @relation(fields: [workerId], references: [id])
  contractorId String?
  contractor   Contractor? @relation(fields: [contractorId], references: [id])
  
  // Usage details
  startTime    DateTime
  endTime      DateTime?
  location     String?
  purpose      String?
  
  // Tracking
  startKm      Int?
  endKm        Int?
  startHours   Float?
  endHours     Float?
  fuelUsed     Float?
  
  notes        String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("equipment_usage")
}

enum OperatorType {
  EMPLOYEE
  CONTRACTOR
}

// Equipment maintenance
model EquipmentMaintenance {
  id          String           @id @default(cuid())
  equipmentId String
  equipment   Equipment        @relation(fields: [equipmentId], references: [id])
  
  type        MaintenanceType
  description String
  scheduledDate DateTime?
  completedDate DateTime?
  status      MaintenanceStatus @default(SCHEDULED)
  
  // Cost tracking
  cost        Float?
  supplier    String?
  
  // Details
  kmReading   Int?
  hoursReading Float?
  partsUsed   Json?
  notes       String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("equipment_maintenance")
}

enum MaintenanceType {
  ROUTINE_SERVICE
  REPAIR
  INSPECTION
  CALIBRATION
  EMERGENCY
}

enum MaintenanceStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  OVERDUE
}

// Equipment assignments to projects
model EquipmentAssignment {
  id          String   @id @default(cuid())
  equipmentId String
  equipment   Equipment @relation(fields: [equipmentId], references: [id])
  
  projectName String
  description String?
  startDate   DateTime
  endDate     DateTime?
  status      AssignmentStatus @default(ACTIVE)
  
  // Cost tracking
  agreedRate  Float?
  totalCost   Float    @default(0)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("equipment_assignments")
}
